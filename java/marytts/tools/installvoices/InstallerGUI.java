/*
 * InstallerGUI.java
 *
 * Created on 17. September 2009, 15:45
 */

package marytts.tools.installvoices;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Box;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import marytts.Version;

/**
 *
 * @author  marc
 */
public class InstallerGUI extends javax.swing.JFrame implements VoiceUpdateListener
{
    private List<LanguageComponentDescription> languages;
    private List<VoiceComponentDescription> voices;
    private LanguageComponentDescription currentLanguage = null;
    private String version = Version.specificationVersion();
    
    /** Creates new form InstallerGUI */
    public InstallerGUI(List<LanguageComponentDescription> initialLanguages, List<VoiceComponentDescription> initialVoices) {
        this.languages = new ArrayList<LanguageComponentDescription>(initialLanguages);
        this.voices = new ArrayList<VoiceComponentDescription>(initialVoices);
        initComponents();
        customInitComponents();
        updateLanguagesTable();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        spLanguages = new javax.swing.JScrollPane();
        pLanguages = new javax.swing.JPanel();
        pDownload = new javax.swing.JPanel();
        tfComponentListURL = new javax.swing.JTextField();
        bUpdate = new javax.swing.JButton();
        pInstallButtons = new javax.swing.JPanel();
        bInstall = new javax.swing.JButton();
        bUninstall = new javax.swing.JButton();
        bUninstall1 = new javax.swing.JButton();
        spVoices = new javax.swing.JScrollPane();
        pVoices = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MARY TTS Installer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                InstallerGUI.this.windowClosing(evt);
            }
        });

        spLanguages.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pLanguages.setLayout(new javax.swing.BoxLayout(pLanguages, javax.swing.BoxLayout.Y_AXIS));

        spLanguages.setViewportView(pLanguages);

        pDownload.setBorder(javax.swing.BorderFactory.createTitledBorder("Download languages and voices from:"));
        tfComponentListURL.setText("http://mary.dfki.de/download/"+version+"/mary-components.xml");

        bUpdate.setText("Update");

        org.jdesktop.layout.GroupLayout pDownloadLayout = new org.jdesktop.layout.GroupLayout(pDownload);
        pDownload.setLayout(pDownloadLayout);
        pDownloadLayout.setHorizontalGroup(
            pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pDownloadLayout.createSequentialGroup()
                .add(tfComponentListURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 540, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 53, Short.MAX_VALUE)
                .add(bUpdate)
                .addContainerGap())
        );
        pDownloadLayout.setVerticalGroup(
            pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(tfComponentListURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(bUpdate))
        );

        bInstall.setText("Install selected");

        bUninstall.setText("Uninstall selected");

        bUninstall1.setText("Quit");
        bUninstall1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pInstallButtonsLayout = new org.jdesktop.layout.GroupLayout(pInstallButtons);
        pInstallButtons.setLayout(pInstallButtonsLayout);
        pInstallButtonsLayout.setHorizontalGroup(
            pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pInstallButtonsLayout.createSequentialGroup()
                .add(144, 144, 144)
                .add(bInstall, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(16, 16, 16)
                .add(bUninstall)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bUninstall1)
                .add(194, 194, 194))
        );
        pInstallButtonsLayout.setVerticalGroup(
            pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pInstallButtonsLayout.createSequentialGroup()
                .add(pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bInstall)
                    .add(bUninstall)
                    .add(bUninstall1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spVoices.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pVoices.setLayout(new javax.swing.BoxLayout(pVoices, javax.swing.BoxLayout.Y_AXIS));

        spVoices.setViewportView(pVoices);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(spLanguages, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(spVoices, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pInstallButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(pDownload, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pDownload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spLanguages, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .add(spVoices, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pInstallButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        confirmExit();
    }//GEN-LAST:event_windowClosing

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        confirmExit();
    }//GEN-LAST:event_quitActionPerformed
    
    
    private void customInitComponents()
    {
        /*
        DescriptionTableModel m = new DescriptionTableModel("Language");
        tLanguages.setModel(m);
        tLanguages.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tLanguages.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    LanguageComponentDescription desc = (LanguageComponentDescription) tLanguages.getModel().getValueAt(tLanguages.getSelectedRow(), 1);
                    updateVoicesTable(desc);
                }
            }
        });
        int tLangWidth = tLanguages.getWidth();
        TableColumnModel cm = tLanguages.getColumnModel();
        cm.getColumn(0).setPreferredWidth(tLangWidth*10/100);
        cm.getColumn(1).setPreferredWidth(tLangWidth*50/100);
        cm.getColumn(2).setPreferredWidth(tLangWidth*40/100);
        cm.getColumn(2).setMaxWidth(tLangWidth*40/100);
        tLanguages.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer(cm.getColumn(2).getPreferredWidth()));
        tLanguages.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(cm.getColumn(2).getPreferredWidth()));
        
        m = new DescriptionTableModel("Voice");
        tVoices.setModel(m);
        cm = tVoices.getColumnModel();
        cm.getColumn(0).setPreferredWidth(20);
        cm.getColumn(2).setPreferredWidth(60);
        tVoices.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer(cm.getColumn(2).getPreferredWidth()));
        tVoices.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(cm.getColumn(2).getPreferredWidth()));
        this.pack();
        */
    }

    private void updateLanguagesTable()
    {
/*        TableModel model = tLanguages.getModel();
        assert model instanceof DescriptionTableModel;
        ((DescriptionTableModel)model).setData(languages);
*/
        pLanguages.removeAll();
        for (ComponentDescription desc : languages) {
            pLanguages.add(new ShortDescriptionPanel(desc, this));
        }
        pLanguages.add(Box.createVerticalGlue());
        pLanguages.getComponent(0).requestFocusInWindow();
    }
    
    public void updateVoices(LanguageComponentDescription newLanguage)
    {
        if (currentLanguage != null && currentLanguage.equals(newLanguage)) {
            return;
        }
        currentLanguage = newLanguage;
        System.out.println("Now updating voices for "+currentLanguage);
        List<VoiceComponentDescription> lVoices = getVoicesForLanguage(currentLanguage);
/*        TableModel model = tVoices.getModel();
        assert model instanceof DescriptionTableModel;
        ((DescriptionTableModel)model).setData(lVoices);
  */
        pVoices.removeAll();
        for (ComponentDescription desc : lVoices) {
            pVoices.add(new ShortDescriptionPanel(desc, null));
            System.out.println("  adding "+desc);
        }
        pVoices.add(Box.createVerticalGlue());
        pVoices.repaint();
        this.pack();
        
    }
    
    
    private List<VoiceComponentDescription> getVoicesForLanguage(LanguageComponentDescription language)
    {
        List<VoiceComponentDescription> lVoices = new ArrayList<VoiceComponentDescription>();
        for (VoiceComponentDescription v : voices) {
            if (v.getDependsLanguage().equals(language.getName())) {
                lVoices.add(v);
            }
        }
        return lVoices;
    }
    
    private void confirmExit()
    {
        int choice = JOptionPane.showConfirmDialog(this, "Really quit?", "Exit program", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            System.exit(0);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    throws Exception
    {
        final InstallFileParser p = new InstallFileParser(new URL("file:/Users/marc/Desktop/mary-component-description.xml"));
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstallerGUI(p.getLanguageDescriptions(), p.getVoiceDescriptions()).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bInstall;
    private javax.swing.JButton bUninstall;
    private javax.swing.JButton bUninstall1;
    private javax.swing.JButton bUpdate;
    private javax.swing.JPanel pDownload;
    private javax.swing.JPanel pInstallButtons;
    private javax.swing.JPanel pLanguages;
    private javax.swing.JPanel pVoices;
    private javax.swing.JScrollPane spLanguages;
    private javax.swing.JScrollPane spVoices;
    private javax.swing.JTextField tfComponentListURL;
    // End of variables declaration//GEN-END:variables
    
    /*
    public static class DescriptionTableModel extends AbstractTableModel
    {
        private String contentColumnHeader;
        private ComponentDescription[] data;
        
        public DescriptionTableModel(String contentColumnHeader)
        {
            this.contentColumnHeader = contentColumnHeader;
        }
        
        public void setData(List<? extends ComponentDescription> newData)
        {
            ComponentDescription[] newDataArray = (ComponentDescription[]) newData.toArray(new ComponentDescription[0]);
            data = newDataArray;
            fireTableDataChanged();
        }

        public String getColumnName(int col)
        {
            if (col == 1) {
                return contentColumnHeader;
            }
            return "";
        }
        
        public Class getColumnClass(int col)
        {
            switch(col) {
            case 0: return Boolean.class;
            case 1: return String.class;
            case 2: return String.class;
            }
            return null;
        }

        public int getRowCount()
        {
            if (data != null) {
                return data.length; 
            }
            return 0;
        }
        public int getColumnCount()
        {
            return 3;
        }
        
        public Object getValueAt(int row, int col)
        {
            if (data == null || data.length <= row) return null;
            switch(col) {
            case 0: return new Boolean(data[row].isSelected());
            case 1: return data[row];
            case 2: return "Details";
            }
            return null;
        }
        
        public void setValueAt(Object val, int row, int col)
        {
            if (col != 0) return;
            assert val instanceof Boolean;
            boolean selected = ((Boolean)val).booleanValue();
            data[row].setSelected(selected);
        }
        
        public boolean isCellEditable(int row, int col)
        {
            if (col == 0 || col == 2) return true;
            return false;
        }
        
    }
    */
    
    /*
    public static class ButtonRenderer implements TableCellRenderer
    {
        public ButtonRenderer()
        {
        }
        
        public Component getTableCellRendererComponent(JTable table,
                Object button, boolean isSelected, boolean hasFocus, int row,
                int column)
        {
            JButton b = (JButton) button;
            return b;
        }
        
    }
    */

    /*
    // From http://www.java2s.com/Code/Java/Swing-Components/ButtonTableExample.htm
    class ButtonRenderer extends JButton implements TableCellRenderer {

      public ButtonRenderer(int buttonWidth) {
        this.setPreferredSize(new Dimension(buttonWidth, 20));
        this.setMaximumSize(new Dimension(buttonWidth, 20));
        setOpaque(true);
      }

      public Component getTableCellRendererComponent(JTable table, Object value,
          boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected) {
          setForeground(table.getSelectionForeground());
          setBackground(table.getSelectionBackground());
        } else {
          setForeground(table.getForeground());
          setBackground(UIManager.getColor("Button.background"));
        }
        setText((value == null) ? "" : value.toString());
        return this;
      }
    }

    // From http://www.java2s.com/Code/Java/Swing-Components/ButtonTableExample.htm
    class ButtonEditor extends DefaultCellEditor {
      protected JButton button;
      private String label;
      private boolean isPushed;
      private ComponentDescription componentDescription;
      

      public ButtonEditor(int buttonWidth) {
        super(new JCheckBox());
        button = new JButton();
        button.setPreferredSize(new Dimension(buttonWidth, 20));
        button.setMaximumSize(new Dimension(buttonWidth, 20));
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            fireEditingStopped();
          }
        });
      }

      public Component getTableCellEditorComponent(JTable table, Object value,
          boolean isSelected, int row, int column) {
        if (isSelected) {
          button.setForeground(table.getSelectionForeground());
          button.setBackground(table.getSelectionBackground());
        } else {
          button.setForeground(table.getForeground());
          button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        componentDescription = (ComponentDescription) table.getValueAt(row, 1);
        return button;
      }

      public Object getCellEditorValue() {
        if (isPushed) {
            showComponentDetails(componentDescription);
        }
        isPushed = false;
        return new String(label);
      }

      public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
      }

      protected void fireEditingStopped() {
        super.fireEditingStopped();
      }
      
      
      private void showComponentDetails(ComponentDescription desc)
      {
          JPanel p;
          if (desc instanceof LanguageComponentDescription) {
              p = new LanguagePanel((LanguageComponentDescription) desc);
          } else {
              p = new VoicePanel((VoiceComponentDescription)desc);
          }
          JOptionPane.showMessageDialog(null, p, "Component details", JOptionPane.PLAIN_MESSAGE);
      }
    }
*/
}
