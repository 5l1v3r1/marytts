/**
 * Copyright 2009 DFKI GmbH.
 * All Rights Reserved.  Use is subject to license terms.
 *
 * This file is part of MARY TTS.
 *
 * MARY TTS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package marytts.tools.install;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Box;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import marytts.Version;
import marytts.tools.install.ComponentDescription.Status;

/**
 *
 * @author  marc
 */
public class InstallerGUI extends javax.swing.JFrame implements VoiceUpdateListener
{
    private List<LanguageComponentDescription> languages;
    private List<VoiceComponentDescription> voices;
    private LanguageComponentDescription currentLanguage = null;
    private String version = Version.specificationVersion();
    
    /** Creates new form InstallerGUI */
    public InstallerGUI()
    {
        this.languages = new ArrayList<LanguageComponentDescription>();
        this.voices = new ArrayList<VoiceComponentDescription>();
        initComponents();
        customInitComponents();
    }
    
    public void addLanguagesAndVoices(InstallFileParser p)
    {
        for (LanguageComponentDescription desc : p.getLanguageDescriptions()) {
            if (!languages.contains(desc)) {
                languages.add(desc);
            }
        }
        for (VoiceComponentDescription desc : p.getVoiceDescriptions()) {
            if (!voices.contains(desc)) {
                voices.add(desc);
            }
        }
        updateLanguagesTable();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        pDownload = new javax.swing.JPanel();
        tfComponentListURL = new javax.swing.JTextField();
        bUpdate = new javax.swing.JButton();
        pInstallButtons = new javax.swing.JPanel();
        bInstall = new javax.swing.JButton();
        bUninstall = new javax.swing.JButton();
        bUninstall1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        spLanguages = new javax.swing.JScrollPane();
        pLanguages = new javax.swing.JPanel();
        spVoices = new javax.swing.JScrollPane();
        pVoices = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MARY TTS Installer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                InstallerGUI.this.windowClosing(evt);
            }
        });

        pDownload.setBorder(javax.swing.BorderFactory.createTitledBorder("Download languages and voices from:"));
        tfComponentListURL.setText("http://mary.dfki.de/download/"+version+"/mary-components.xml");

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pDownloadLayout = new org.jdesktop.layout.GroupLayout(pDownload);
        pDownload.setLayout(pDownloadLayout);
        pDownloadLayout.setHorizontalGroup(
            pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pDownloadLayout.createSequentialGroup()
                .add(tfComponentListURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 540, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 73, Short.MAX_VALUE)
                .add(bUpdate)
                .addContainerGap())
        );
        pDownloadLayout.setVerticalGroup(
            pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pDownloadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(tfComponentListURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(bUpdate))
        );

        bInstall.setText("Install selected");
        bInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInstallActionPerformed(evt);
            }
        });

        bUninstall.setText("Uninstall selected");
        bUninstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUninstallActionPerformed(evt);
            }
        });

        bUninstall1.setText("Quit");
        bUninstall1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pInstallButtonsLayout = new org.jdesktop.layout.GroupLayout(pInstallButtons);
        pInstallButtons.setLayout(pInstallButtonsLayout);
        pInstallButtonsLayout.setHorizontalGroup(
            pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pInstallButtonsLayout.createSequentialGroup()
                .add(146, 146, 146)
                .add(bInstall, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(14, 14, 14)
                .add(bUninstall)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bUninstall1)
                .add(194, 194, 194))
        );
        pInstallButtonsLayout.setVerticalGroup(
            pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pInstallButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pInstallButtonsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bUninstall)
                    .add(bInstall)
                    .add(bUninstall1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spLanguages.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pLanguages.setLayout(new javax.swing.BoxLayout(pLanguages, javax.swing.BoxLayout.Y_AXIS));

        spLanguages.setViewportView(pLanguages);

        spVoices.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pVoices.setLayout(new javax.swing.BoxLayout(pVoices, javax.swing.BoxLayout.Y_AXIS));

        spVoices.setViewportView(pVoices);

        jLabel1.setText("Languages");

        jLabel2.setText("Voices");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spLanguages, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(21, 21, 21)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spVoices, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 369, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spVoices, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .add(spLanguages, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, 0, 730, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pInstallButtons, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pDownload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pDownload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pInstallButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bUninstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUninstallActionPerformed
        uninstallSelectedLanguagesAndVoices();
    }//GEN-LAST:event_bUninstallActionPerformed

    private void bInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInstallActionPerformed
        installSelectedLanguagesAndVoices();
    }//GEN-LAST:event_bInstallActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        String urlString = tfComponentListURL.getText().trim().replaceAll(" ", "%20");
        try {
            URL url = new URL(urlString);
            InstallFileParser p = new InstallFileParser(url);
            addLanguagesAndVoices(p);
        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            pw.close();
            String message = sw.toString();
            JOptionPane.showMessageDialog(this, "Problem retrieving component list:\n"+message);
        }
    }//GEN-LAST:event_bUpdateActionPerformed

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        confirmExit();
    }//GEN-LAST:event_windowClosing

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        confirmExit();
    }//GEN-LAST:event_quitActionPerformed
    
    
    private void customInitComponents()
    {
        bUpdate.requestFocusInWindow();
    }

    private void updateLanguagesTable()
    {
        pLanguages.removeAll();
        for (ComponentDescription desc : languages) {
            pLanguages.add(new ShortDescriptionPanel(desc, this));
        }
        pLanguages.add(Box.createVerticalGlue());
        if (languages.size() > 0) {
            pLanguages.getComponent(0).requestFocusInWindow();
            updateVoices(languages.get(0), true);
        }
    }
    
    public void updateVoices(LanguageComponentDescription newLanguage, boolean forceUpdate)
    {
        if (currentLanguage != null && currentLanguage.equals(newLanguage) && !forceUpdate) {
            return;
        }
        currentLanguage = newLanguage;
        System.out.println("Now updating voices for "+currentLanguage);
        List<VoiceComponentDescription> lVoices = getVoicesForLanguage(currentLanguage);
        pVoices.removeAll();
        for (ComponentDescription desc : lVoices) {
            pVoices.add(new ShortDescriptionPanel(desc, null));
            System.out.println("  adding "+desc);
        }
        pVoices.add(Box.createVerticalGlue());
        pVoices.repaint();
        this.pack();
        
    }
    
    
    private List<VoiceComponentDescription> getVoicesForLanguage(LanguageComponentDescription language)
    {
        List<VoiceComponentDescription> lVoices = new ArrayList<VoiceComponentDescription>();
        for (VoiceComponentDescription v : voices) {
            if (v.getDependsLanguage().equals(language.getName())) {
                lVoices.add(v);
            }
        }
        return lVoices;
    }
    
    private void confirmExit()
    {
        int choice = JOptionPane.showConfirmDialog(this, "Really quit?", "Exit program", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            System.exit(0);
        }
    }
    
    
    public void installSelectedLanguagesAndVoices()
    {
        int downloadSize = 0;
        List<ComponentDescription> toInstall = new ArrayList<ComponentDescription>();
        for (LanguageComponentDescription lang : languages) {
            if (lang.isSelected() && lang.getStatus() != Status.INSTALLED) {
                toInstall.add(lang);
                if (lang.getStatus() == Status.AVAILABLE) {
                    downloadSize += lang.getPackageSize();
                }
                System.out.println(lang.getName()+" selected for installation");
            }
            // Show voices with corresponding language:
            List<VoiceComponentDescription> lVoices = getVoicesForLanguage(lang);
            for (VoiceComponentDescription voice : lVoices) {
                if (voice.isSelected() && voice.getStatus() != Status.INSTALLED) {
                    toInstall.add(voice);
                    if (lang.getStatus() == Status.AVAILABLE) {
                        downloadSize += voice.getPackageSize();
                    }
                    System.out.println(voice.getName()+" selected for installation");
                }
            }
        }
        if (toInstall.size() == 0) {
            JOptionPane.showMessageDialog(this, "You have not selected any installable components");
            return;
        }
        int returnValue = JOptionPane.showConfirmDialog(this, "Install "+toInstall.size()+" components?\n("+downloadSize+" bytes to download)", "Proceed with installation?", JOptionPane.YES_NO_OPTION);
        if (returnValue != JOptionPane.YES_OPTION) {
            System.err.println("Aborting installation.");
            return;
        }
        System.out.println("Starting installation");
        showProgressPanel(toInstall, true);
    }
    
    public void uninstallSelectedLanguagesAndVoices()
    {
        List<ComponentDescription> toUninstall = new ArrayList<ComponentDescription>();
        for (LanguageComponentDescription lang : languages) {
            if (lang.isSelected() && lang.getStatus() == Status.INSTALLED) {
                toUninstall.add(lang);
                System.out.println(lang.getName()+" selected for uninstall");
            }
            // Show voices with corresponding language:
            List<VoiceComponentDescription> lVoices = getVoicesForLanguage(lang);
            for (VoiceComponentDescription voice : lVoices) {
                if (voice.isSelected() && voice.getStatus() == Status.INSTALLED) {
                    toUninstall.add(voice);
                    System.out.println(voice.getName()+" selected for uninstall");
                }
            }
        }
        if (toUninstall.size() == 0) {
            JOptionPane.showMessageDialog(this, "You have not selected any uninstallable components");
            return;
        }
        int returnValue = JOptionPane.showConfirmDialog(this, "Uninstall "+toUninstall.size()+" components?\n", "Proceed with uninstall?", JOptionPane.YES_NO_OPTION);
        if (returnValue != JOptionPane.YES_OPTION) {
            System.err.println("Aborting uninstall.");
            return;
        }
        System.out.println("Starting uninstall");
        showProgressPanel(toUninstall, false);

    }
    
    
    private void showProgressPanel(List<ComponentDescription> comps, boolean install)
    {
        final ProgressPanel pp = new ProgressPanel(comps, install);
        final JOptionPane optionPane = new JOptionPane(pp, JOptionPane.PLAIN_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new String[] {"Abort"}, "Abort");
        //optionPane.setPreferredSize(new Dimension(640,480));
        final JDialog dialog = new JDialog((Frame)null, "Progress", false);
        dialog.setContentPane(optionPane);
        optionPane.addPropertyChangeListener(
                new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent e) {
                        String prop = e.getPropertyName();

                        if (dialog.isVisible() 
                                && (e.getSource() == optionPane)
                                && (prop.equals(JOptionPane.VALUE_PROPERTY))) {
                            dialog.setVisible(false);
                            pp.requestExit();
                        }
                    }
                });
        dialog.pack();
        dialog.setVisible(true);
        new Thread(pp).start();
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    throws Exception
    {
        String maryBase = System.getProperty("mary.base");
        if (maryBase == null || !new File(maryBase).isDirectory()) {
            JFrame window = new JFrame("This is the Frames's Title Bar!");
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Please indicate MARY TTS installation directory");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fc.showOpenDialog(window);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                if (file != null)
                    maryBase = file.getAbsolutePath(); 
            }
        }
        if (maryBase == null || !new File(maryBase).isDirectory()) {
            System.out.println("No MARY base directory -- exiting.");
            System.exit(0);
        }
        System.setProperty("mary.base", maryBase);
        
        File archiveDir = new File(maryBase+"/download");
        if (!archiveDir.exists()) archiveDir.mkdir();
        System.setProperty("mary.downloadDir", archiveDir.getPath());
        File infoDir = new File(maryBase+"/installed");
        if (!infoDir.exists()) infoDir.mkdir();
        System.setProperty("mary.installedDir", infoDir.getPath());

        InstallerGUI g = new InstallerGUI();

        File[] componentDescriptionFiles = infoDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith(".xml");
            }
        });
        for (File cd : componentDescriptionFiles) {
            try {
                g.addLanguagesAndVoices(new InstallFileParser(cd.toURL()));
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
        componentDescriptionFiles = archiveDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith(".xml");
            }
        });
        for (File cd : componentDescriptionFiles) {
            try {
                g.addLanguagesAndVoices(new InstallFileParser(cd.toURL()));
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
        
        g.setVisible(true);
    
    
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bInstall;
    private javax.swing.JButton bUninstall;
    private javax.swing.JButton bUninstall1;
    private javax.swing.JButton bUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pDownload;
    private javax.swing.JPanel pInstallButtons;
    private javax.swing.JPanel pLanguages;
    private javax.swing.JPanel pVoices;
    private javax.swing.JScrollPane spLanguages;
    private javax.swing.JScrollPane spVoices;
    private javax.swing.JTextField tfComponentListURL;
    // End of variables declaration//GEN-END:variables
    

}
