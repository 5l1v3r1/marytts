description 'An open-source, multilingual Text-to-Speech Synthesis platform written in Java'


allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse-wtp'

    group 'de.dfki.mary'
    version '5.2-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        jcenter()
        ivy {
            url rootDir.path + '/lib/repo'
            layout 'maven'
        }
    }
}

subprojects {

    dependencies {
        testCompile group: 'org.testng', name: 'testng', version: '6.8.13'
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDirs = ["src/integrationTest/java"]
            }
            resources {
                srcDir "src/integrationTest/resources"
            }
        }
    }


    configurations {
        integrationTestCompile {
            extendsFrom testCompile
        }
        integrationTestRuntime {
            extendsFrom testRuntime
        }
    }

    task integrationTest(type: Test) {
        group 'Verification'
        description 'Runs the integration tests.'
        check.dependsOn it

        useTestNG()//  {
        //     includeGroups 'integration'
        // }
        testClassesDir = project.sourceSets.integrationTest.output.classesDir
        classpath = project.sourceSets.integrationTest.runtimeClasspath
    }

    tasks.withType(Test) {
        reports {
            html.destination = file("$reporting.baseDir/$name")
            junitXml.destination = file("$testResultsDir/$name")
        }
    }

    test {
        useTestNG()
        systemProperty "mary.base", "$rootProject.projectDir/resources"
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact packageSources {
                    classifier 'sources'
                }
            }
        }
    }
}

task copyJars(type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    into project.file("$buildDir/libs")
}

task copyDeps(type: Copy) {
    from(subprojects.configurations.runtime)
    into project.file("$buildDir/libs")
}

task copyResources(type: Copy) {
    from "$projectDir/resources"
    into project.file("$buildDir/")
}

task copyFiles(dependsOn: [copyJars, copyDeps, copyResources])

tasks.build.dependsOn(copyFiles)
