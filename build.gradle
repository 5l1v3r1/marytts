description 'An open-source, multilingual Text-to-Speech Synthesis platform written in Java'

task wrapper(type: Wrapper) {
       gradleVersion = '2.11' //version required
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group 'de.dfki.mary'
    version '5.2-SNAPSHOT'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenLocal()
        jcenter()
        ivy {
            url rootDir.path + '/lib/repo'
            layout 'maven'
        }
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += main.output
            }
            resources {
                srcDir test.resources
            }
        }
    }

    configurations {
        integrationTestCompile {
            extendsFrom testCompile
        }
        integrationTestRuntime {
            extendsFrom testRuntime
        }
    }

    task integrationTest(type: Test) {
        group 'Verification'
        description 'Runs the integration tests.'
        check.dependsOn it
        testClassesDir = project.sourceSets.integrationTest.output.classesDir
        classpath = project.sourceSets.integrationTest.runtimeClasspath
    }

    tasks.withType(Test) {
        reports {
            html.destination = file("$reporting.baseDir/$name")
            junitXml.destination = file("$testResultsDir/$name")
        }
    }

    test {
        systemProperty "mary.base", "$rootProject.projectDir/resources"
    }
}

subprojects {
    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact packageSources {
                    classifier 'sources'
                }
            }
        }
    }
}

task copyJars(type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    into project.file("$buildDir/libs")
}

task copyDeps(type: Copy) {
    from(subprojects.configurations.runtime)
    into project.file("$buildDir/libs")
}

task copyResources(type: Copy) {
    from "$projectDir/resources"
    into project.file("$buildDir/")
}

task copyFiles(dependsOn: [copyJars, copyDeps, copyResources])

tasks.build.dependsOn(copyFiles)
